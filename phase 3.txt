import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt

# Simulated historical earthquake data
def generate_data(n=1000):
    np.random.seed(42)
    data = {
        'seismic_activity': np.random.uniform(0, 10, n),
        'depth_km': np.random.uniform(0, 700, n),
        'magnitude': np.random.uniform(1, 9, n),
        'tectonic_zone': np.random.choice([0, 1], size=n),  # 0 = stable, 1 = active
    }
    df = pd.DataFrame(data)
    # Define severity (1 = severe) based on rules
    df['severe'] = ((df['magnitude'] > 6.5) & (df['depth_km'] < 100) & (df['tectonic_zone'] == 1)).astype(int)
    return df

# Load data
df = generate_data()

# Train/test split
X = df[['seismic_activity', 'depth_km', 'magnitude', 'tectonic_zone']]
y = df['severe']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate
predictions = model.predict(X_test)
print(classification_report(y_test, predictions))

# Management Logic: Alert if predicted severe
def issue_alert(input_data):
    prediction = model.predict([input_data])[0]
    if prediction == 1:
        print("❗ ALERT: Potential Severe Earthquake Detected!")
    else:
        print("✅ Normal seismic activity.")

# Example usage
sample_input = [7.2, 50, 7.1, 1]  # high seismic, shallow, large magnitude, active zone
issue_alert(sample_input)

# Plot for understanding
plt.scatter(df['magnitude'], df['depth_km'], c=df['severe'], cmap='coolwarm', alpha=0.6)
plt.xlabel("Magnitude")
plt.ylabel("Depth (km)")
plt.title("Earthquake Severity Visualization")
plt.show()